{"ast":null,"code":"import * as React from 'react';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\nexport const editable = (label, {\n  rowIndex,\n  rowData,\n  column\n}) => {\n  const {\n    extraParams: {\n      onRowEdit\n    }\n  } = column;\n\n  const toggleEditMode = (event, type) => {\n    let validationErrors = {};\n\n    if (type === 'save') {\n      validationErrors = rowData.rowEditValidationRules && rowData.rowEditValidationRules.reduce((acc, rule) => {\n        const invalidCells = rowData.cells.filter(cellData => {\n          const testValue = cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n          let failedValidation = false;\n\n          if (Array.isArray(testValue) && testValue.length) {\n            // multiple values, like multiselect\n            failedValidation = testValue.reduce((hasInvalidSelection, el) => {\n              // if one value fails validation, the entire cell is invalid\n              if (hasInvalidSelection === true) {\n                return true;\n              }\n\n              return !rule.validator(el);\n            }, failedValidation);\n          } else if (Array.isArray(testValue) && !testValue.length) {\n            // case where all values were dismissed in multiselect\n            failedValidation = !rule.validator('');\n          } else {\n            // simple text fields\n            failedValidation = !rule.validator(testValue);\n          }\n\n          if (failedValidation) {\n            cellData.props.isValid = false;\n          }\n\n          return failedValidation;\n        });\n\n        if (invalidCells.length) {\n          acc[rule.name] = invalidCells.map(cell => cell.props.name);\n        }\n\n        return acc;\n      }, {});\n    } // tslint:disable-next-line:no-unused-expression\n\n\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n\n\n  function getAriaLabelTxt(identifier, actionType) {\n    let result;\n\n    switch (actionType) {\n      case 'cancel':\n        result = `Cancel row edits for row ${identifier}`;\n        break;\n\n      case 'save':\n        result = `Save row edits for row ${identifier}`;\n        break;\n\n      default:\n        result = `Place row ${identifier} in edit mode`;\n    }\n\n    return result;\n  }\n\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: React.createElement(EditColumn, {\n      saveAriaLabel: rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'save'),\n      cancelAriaLabel: rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'cancel'),\n      editAriaLabel: rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'edit'),\n      valid: rowData && rowData.isValid,\n      editing: rowData && rowData.isEditable,\n      onClick: toggleEditMode\n    })\n  };\n};","map":{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/editable.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\nexport const editable = (label, { rowIndex, rowData, column }) => {\n    const { extraParams: { onRowEdit } } = column;\n    const toggleEditMode = (event, type) => {\n        let validationErrors = {};\n        if (type === 'save') {\n            validationErrors =\n                rowData.rowEditValidationRules &&\n                    rowData.rowEditValidationRules.reduce((acc, rule) => {\n                        const invalidCells = rowData.cells.filter(cellData => {\n                            const testValue = cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n                            let failedValidation = false;\n                            if (Array.isArray(testValue) && testValue.length) {\n                                // multiple values, like multiselect\n                                failedValidation = testValue.reduce((hasInvalidSelection, el) => {\n                                    // if one value fails validation, the entire cell is invalid\n                                    if (hasInvalidSelection === true) {\n                                        return true;\n                                    }\n                                    return !rule.validator(el);\n                                }, failedValidation);\n                            }\n                            else if (Array.isArray(testValue) && !testValue.length) {\n                                // case where all values were dismissed in multiselect\n                                failedValidation = !rule.validator('');\n                            }\n                            else {\n                                // simple text fields\n                                failedValidation = !rule.validator(testValue);\n                            }\n                            if (failedValidation) {\n                                cellData.props.isValid = false;\n                            }\n                            return failedValidation;\n                        });\n                        if (invalidCells.length) {\n                            acc[rule.name] = invalidCells.map(cell => cell.props.name);\n                        }\n                        return acc;\n                    }, {});\n        }\n        // tslint:disable-next-line:no-unused-expression\n        onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n    };\n    /**\n     * @param {number} identifier identifier used for the row\n     * @param {RowEditType} actionType the type of row edit action\n     */\n    function getAriaLabelTxt(identifier, actionType) {\n        let result;\n        switch (actionType) {\n            case 'cancel':\n                result = `Cancel row edits for row ${identifier}`;\n                break;\n            case 'save':\n                result = `Save row edits for row ${identifier}`;\n                break;\n            default:\n                result = `Place row ${identifier} in edit mode`;\n        }\n        return result;\n    }\n    return {\n        className: tableStyles.tableInlineEditAction,\n        component: 'td',\n        isVisible: true,\n        children: (React.createElement(EditColumn, { saveAriaLabel: (rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex)) ||\n                getAriaLabelTxt(rowIndex, 'save'), cancelAriaLabel: (rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex)) ||\n                getAriaLabelTxt(rowIndex, 'cancel'), editAriaLabel: (rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex)) ||\n                getAriaLabelTxt(rowIndex, 'edit'), valid: rowData && rowData.isValid, editing: rowData && rowData.isEditable, onClick: toggleEditMode }))\n    };\n};\n//# sourceMappingURL=editable.js.map"]},"metadata":{},"sourceType":"module"}