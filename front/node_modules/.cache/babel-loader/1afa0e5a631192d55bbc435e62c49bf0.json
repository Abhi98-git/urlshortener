{"ast":null,"code":"/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nexport class BodyRow extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    const {\n      columns,\n      rowData\n    } = this.props; // Check for row based override.\n\n    const {\n      renderers\n    } = nextProps;\n\n    if (renderers && renderers.row && renderers.row.shouldComponentUpdate) {\n      if (typeof renderers.row.shouldComponentUpdate === 'function') {\n        return renderers.row.shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n  }\n\n  render() {\n    const {\n      columns,\n      renderers,\n      onRow,\n      rowKey,\n      rowIndex,\n      rowData\n    } = this.props;\n    return React.createElement(renderers.row, onRow(rowData, {\n      rowIndex,\n      rowKey\n    }), columns.map((column, columnIndex) => {\n      const {\n        property,\n        cell,\n        props\n      } = column;\n      const evaluatedProperty = property || cell && cell.property;\n      const {\n        transforms = [],\n        formatters = []\n      } = cell || {};\n      const extraParameters = {\n        columnIndex,\n        property: evaluatedProperty,\n        column,\n        rowData,\n        rowIndex,\n        rowKey\n      };\n      const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n      if (!transformed) {\n        // eslint-disable-next-line no-console\n        console.warn('Table.Body - Failed to receive a transformed result');\n      }\n\n      let additionalFormaters = [];\n\n      if (rowData[evaluatedProperty]) {\n        additionalFormaters = rowData[evaluatedProperty].formatters;\n      }\n\n      return React.createElement(renderers.cell, Object.assign({\n        key: `col-${columnIndex}-row-${rowIndex}`\n      }, mergeProps(props, cell && cell.props, transformed)), !rowData.fullWidth && transformed.children || evaluateFormatters([...formatters, ...additionalFormaters])(rowData[`_${evaluatedProperty}`] || rowData[evaluatedProperty], extraParameters));\n    }));\n  }\n\n}\nBodyRow.displayName = 'BodyRow';\nBodyRow.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: (...args) => Object\n};","map":{"version":3,"sources":["../../../../../src/components/Table/base/body-row.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nexport class BodyRow extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        const { columns, rowData } = this.props;\n        // Check for row based override.\n        const { renderers } = nextProps;\n        if (renderers && renderers.row && renderers.row.shouldComponentUpdate) {\n            if (typeof renderers.row.shouldComponentUpdate === 'function') {\n                return renderers.row.shouldComponentUpdate.call(this, nextProps, {}, {});\n            }\n            return true;\n        }\n        return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n    }\n    render() {\n        const { columns, renderers, onRow, rowKey, rowIndex, rowData } = this.props;\n        return React.createElement(renderers.row, onRow(rowData, { rowIndex, rowKey }), columns.map((column, columnIndex) => {\n            const { property, cell, props } = column;\n            const evaluatedProperty = (property || (cell && cell.property));\n            const { transforms = [], formatters = [] } = cell || {};\n            const extraParameters = {\n                columnIndex,\n                property: evaluatedProperty,\n                column,\n                rowData,\n                rowIndex,\n                rowKey\n            };\n            const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n            if (!transformed) {\n                // eslint-disable-next-line no-console\n                console.warn('Table.Body - Failed to receive a transformed result');\n            }\n            let additionalFormaters = [];\n            if (rowData[evaluatedProperty]) {\n                additionalFormaters = rowData[evaluatedProperty].formatters;\n            }\n            return React.createElement(renderers.cell, Object.assign({ key: `col-${columnIndex}-row-${rowIndex}` }, mergeProps(props, cell && cell.props, transformed)), (!rowData.fullWidth && transformed.children) ||\n                evaluateFormatters([...formatters, ...additionalFormaters])(rowData[`_${evaluatedProperty}`] || rowData[evaluatedProperty], extraParameters));\n        }));\n    }\n}\nBodyRow.displayName = 'BodyRow';\nBodyRow.defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args) => Object\n};\n//# sourceMappingURL=body-row.js.map"]},"metadata":{},"sourceType":"module"}