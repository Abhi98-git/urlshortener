{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Tooltip } from \"@patternfly/react-core/dist/esm/components/Tooltip/Tooltip\";\nimport { Td } from '../TableComposable/Td';\nexport const BodyCell = _a => {\n  var {\n    'data-label': dataLabel = '',\n    className = '',\n    colSpan,\n    component = 'td',\n    isVisible,\n    parentId,\n    textCenter = false,\n    tooltip: tooltipProp = '',\n    onMouseEnter: onMouseEnterProp = () => {},\n    children,\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    errorText,\n    isValid,\n    isOpen,\n    ariaControls,\n    editableValue,\n    editableSelectProps,\n    options,\n    isSelectOpen,\n    value,\n    name\n  } = _a,\n\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  props = __rest(_a, ['data-label', \"className\", \"colSpan\", \"component\", \"isVisible\", \"parentId\", \"textCenter\", \"tooltip\", \"onMouseEnter\", \"children\", \"errorText\", \"isValid\", \"isOpen\", \"ariaControls\", \"editableValue\", \"editableSelectProps\", \"options\", \"isSelectOpen\", \"value\", \"name\"]);\n\n  const [tooltip, setTooltip] = React.useState('');\n\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      if (tooltipProp) {\n        setTooltip(tooltipProp);\n      } else if (typeof children === 'string') {\n        setTooltip(children);\n      }\n    } else {\n      setTooltip('');\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  const cell = React.createElement(Td, Object.assign({\n    className: className,\n    component: component,\n    dataLabel: dataLabel && !parentId ? dataLabel : null,\n    onMouseEnter: onMouseEnter,\n    textCenter: textCenter,\n    colSpan: colSpan\n  }, props), children);\n  const bodyCell = tooltip !== '' ? React.createElement(Tooltip, {\n    content: tooltip,\n    isVisible: true\n  }, cell) : cell;\n  return parentId !== undefined && colSpan === undefined || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';","map":{"version":3,"sources":["../../../../src/components/Table/BodyCell.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,OAAT,QAAkB,4DAAlB;AAEA,SAAS,EAAT,QAAmB,uBAAnB;AAwBA,OAAO,MAAM,QAAQ,GAA4C,EAAD,IAwB5C;MAxB6C;AAC/D,kBAAc,SAAS,GAAG,EADqC;AAE/D,IAAA,SAAS,GAAG,EAFmD;AAG/D,IAAA,OAH+D;AAI/D,IAAA,SAAS,GAAG,IAJmD;AAK/D,IAAA,SAL+D;AAM/D,IAAA,QAN+D;AAO/D,IAAA,UAAU,GAAG,KAPkD;AAQ/D,IAAA,OAAO,EAAE,WAAW,GAAG,EARwC;AAS/D,IAAA,YAAY,EAAE,gBAAgB,GAAG,MAAK,CAAG,CATsB;AAU/D,IAAA,QAV+D;;AAW/D;AACA,IAAA,SAZ+D;AAa/D,IAAA,OAb+D;AAc/D,IAAA,MAd+D;AAe/D,IAAA,YAf+D;AAgB/D,IAAA,aAhB+D;AAiB/D,IAAA,mBAjB+D;AAkB/D,IAAA,OAlB+D;AAmB/D,IAAA,YAnB+D;AAoB/D,IAAA,KApB+D;AAqB/D,IAAA;AArB+D,MAqB3D,E;;AACJ;AACG,EAAA,KAAK,GAAA,MAAA,CAAA,EAAA,EAvBuD,CAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,cAAA,EAAA,UAAA,EAAA,WAAA,EAAA,SAAA,EAAA,QAAA,EAAA,cAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,SAAA,EAAA,cAAA,EAAA,OAAA,EAAA,MAAA,CAuBvD,C;;AAER,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,KAAK,CAAC,QAAN,CAAe,EAAf,CAA9B;;AACA,QAAM,YAAY,GAAI,KAAD,IAAe;AAClC,QAAI,KAAK,CAAC,MAAN,CAAa,WAAb,GAA2B,KAAK,CAAC,MAAN,CAAa,WAA5C,EAAyD;AACvD,UAAI,WAAJ,EAAiB;AACf,QAAA,UAAU,CAAC,WAAD,CAAV;AACD,OAFD,MAEO,IAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AACvC,QAAA,UAAU,CAAC,QAAD,CAAV;AACD;AACF,KAND,MAMO;AACL,MAAA,UAAU,CAAC,EAAD,CAAV;AACD;;AACD,IAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAXD;;AAaA,QAAM,IAAI,GACR,KAAA,CAAA,aAAA,CAAC,EAAD,EAAG,MAAA,CAAA,MAAA,CAAA;AACD,IAAA,SAAS,EAAE,SADV;AAED,IAAA,SAAS,EAAE,SAFV;AAGD,IAAA,SAAS,EAAE,SAAS,IAAI,CAAC,QAAd,GAAyB,SAAzB,GAAqC,IAH/C;AAID,IAAA,YAAY,EAAE,YAJb;AAKD,IAAA,UAAU,EAAE,UALX;AAMD,IAAA,OAAO,EAAE;AANR,GAAA,EAOG,KAPH,CAAH,EASG,QATH,CADF;AAcA,QAAM,QAAQ,GACZ,OAAO,KAAK,EAAZ,GACE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AAAC,IAAA,OAAO,EAAE,OAAV;AAAmB,IAAA,SAAS,EAAA;AAA5B,GAAR,EACG,IADH,CADF,GAKE,IANJ;AASA,SAAQ,QAAQ,KAAK,SAAb,IAA0B,OAAO,KAAK,SAAvC,IAAqD,CAAC,SAAtD,GAAkE,IAAlE,GAAyE,QAAhF;AACD,CA/DM;AAgEP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Tooltip } from \"@patternfly/react-core/dist/esm/components/Tooltip/Tooltip\";\nimport { Td } from '../TableComposable/Td';\nexport const BodyCell = (_a) => {\n    var { 'data-label': dataLabel = '', className = '', colSpan, component = 'td', isVisible, parentId, textCenter = false, tooltip: tooltipProp = '', onMouseEnter: onMouseEnterProp = () => { }, children, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    errorText, isValid, isOpen, ariaControls, editableValue, editableSelectProps, options, isSelectOpen, value, name } = _a, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, ['data-label', \"className\", \"colSpan\", \"component\", \"isVisible\", \"parentId\", \"textCenter\", \"tooltip\", \"onMouseEnter\", \"children\", \"errorText\", \"isValid\", \"isOpen\", \"ariaControls\", \"editableValue\", \"editableSelectProps\", \"options\", \"isSelectOpen\", \"value\", \"name\"]);\n    const [tooltip, setTooltip] = React.useState('');\n    const onMouseEnter = (event) => {\n        if (event.target.offsetWidth < event.target.scrollWidth) {\n            if (tooltipProp) {\n                setTooltip(tooltipProp);\n            }\n            else if (typeof children === 'string') {\n                setTooltip(children);\n            }\n        }\n        else {\n            setTooltip('');\n        }\n        onMouseEnterProp(event);\n    };\n    const cell = (React.createElement(Td, Object.assign({ className: className, component: component, dataLabel: dataLabel && !parentId ? dataLabel : null, onMouseEnter: onMouseEnter, textCenter: textCenter, colSpan: colSpan }, props), children));\n    const bodyCell = tooltip !== '' ? (React.createElement(Tooltip, { content: tooltip, isVisible: true }, cell)) : (cell);\n    return (parentId !== undefined && colSpan === undefined) || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';\n//# sourceMappingURL=BodyCell.js.map"]},"metadata":{},"sourceType":"module"}