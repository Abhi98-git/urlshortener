{"ast":null,"code":"import { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nclass BaseBody extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.omitOnRow = props => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        onRow\n      } = props,\n            ret = __rest(props, [\"onRow\"]);\n\n      return ret;\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const {\n      renderers\n    } = nextProps;\n\n    if (renderers && renderers.body && renderers.body.wrapper && renderers.body.wrapper.shouldComponentUpdate) {\n      if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n        return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onRow,\n      rows,\n      rowKey,\n      columns,\n      renderers\n    } = _a,\n          props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n\n    const children = rows.map((rowData, index) => {\n      const key = resolveRowKey({\n        rowData,\n        rowIndex: index,\n        rowKey\n      });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n    return React.createElement(renderers.body.wrapper, props, children);\n  }\n\n}\n\nBaseBody.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: (...args) => Object\n};\nexport const Body = props => React.createElement(ProviderContext.Consumer, null, ({\n  columns,\n  renderers\n}) => React.createElement(BaseBody, Object.assign({\n  columns: columns,\n  renderers: renderers\n}, props)));","map":{"version":3,"sources":["../../../../../src/components/Table/base/body.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\nclass BaseBody extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.omitOnRow = (props) => {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { onRow } = props, ret = __rest(props, [\"onRow\"]);\n            return ret;\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        // Skip checking props against `onRow` since that can be bound at render().\n        // That's not particularly good practice but you never know how the users\n        // prefer to define the handler.\n        // Check for wrapper based override.\n        const { renderers } = nextProps;\n        if (renderers &&\n            renderers.body &&\n            renderers.body.wrapper &&\n            renderers.body.wrapper.shouldComponentUpdate) {\n            if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n                return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n            }\n            return true;\n        }\n        return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n    }\n    render() {\n        const _a = this.props, { onRow, rows, rowKey, columns, renderers } = _a, props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n        const children = rows.map((rowData, index) => {\n            const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n            return React.createElement(BodyRow, {\n                key,\n                renderers: renderers.body,\n                onRow,\n                rowKey: key,\n                rowIndex: index,\n                rowData,\n                columns\n            });\n        });\n        return React.createElement(renderers.body.wrapper, props, children);\n    }\n}\nBaseBody.defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args) => Object\n};\nexport const Body = (props) => (React.createElement(ProviderContext.Consumer, null, ({ columns, renderers }) => React.createElement(BaseBody, Object.assign({ columns: columns, renderers: renderers }, props))));\n//# sourceMappingURL=body.js.map"]},"metadata":{},"sourceType":"module"}