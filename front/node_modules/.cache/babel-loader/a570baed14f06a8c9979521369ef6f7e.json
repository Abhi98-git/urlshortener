{"ast":null,"code":"/**\n * evaluate-transforms.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { mergeProps } from './merge-props';\n/**\n * @param {transformsType} transforms - transforms type\n * @param {string | object} value - value\n * @param {ExtraParamsType} extraParameters - extra params type\n */\n\nexport function evaluateTransforms(transforms = [], value, extraParameters = {}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!transforms.every(f => typeof f === 'function')) {\n      throw new Error(\"All transforms weren't functions!\");\n    }\n  }\n\n  if (transforms.length === 0) {\n    return {};\n  }\n\n  return mergeProps(...transforms.map(transform => transform(value, extraParameters)));\n}","map":{"version":3,"sources":["../../../../../src/components/Table/base/evaluate-transforms.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AACH,SAAS,UAAT,QAA2B,eAA3B;AAGA;;;;AAIG;;AACH,OAAM,SAAU,kBAAV,CACJ,UAAA,GAA6B,EADzB,EAEJ,KAFI,EAGJ,eAAA,GAAmC,EAH/B,EAGiC;AAErC,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,CAAC,UAAU,CAAC,KAAX,CAAiB,CAAC,IAAI,OAAO,CAAP,KAAa,UAAnC,CAAL,EAAqD;AACnD,YAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;AACF;;AAED,MAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAO,EAAP;AACD;;AAED,SAAO,UAAU,CAAC,GAAG,UAAU,CAAC,GAAX,CAAe,SAAS,IAAI,SAAS,CAAC,KAAD,EAAQ,eAAR,CAArC,CAAJ,CAAjB;AACD","sourceRoot":"","sourcesContent":["/**\n * evaluate-transforms.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { mergeProps } from './merge-props';\n/**\n * @param {transformsType} transforms - transforms type\n * @param {string | object} value - value\n * @param {ExtraParamsType} extraParameters - extra params type\n */\nexport function evaluateTransforms(transforms = [], value, extraParameters = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!transforms.every(f => typeof f === 'function')) {\n            throw new Error(\"All transforms weren't functions!\");\n        }\n    }\n    if (transforms.length === 0) {\n        return {};\n    }\n    return mergeProps(...transforms.map(transform => transform(value, extraParameters)));\n}\n//# sourceMappingURL=evaluate-transforms.js.map"]},"metadata":{},"sourceType":"module"}