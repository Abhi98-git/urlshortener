{"ast":null,"code":"import * as React from 'react';\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Button, Tooltip, Popover } from '@patternfly/react-core';\nimport { TableText } from './TableText';\nexport const HeaderCellInfoWrapper = ({\n  children,\n  info,\n  className,\n  variant = 'tooltip',\n  popoverProps,\n  tooltipProps,\n  ariaLabel\n}) => React.createElement(\"div\", {\n  className: css(styles.tableColumnHelp, className)\n}, typeof children === 'string' ? React.createElement(TableText, null, children) : children, React.createElement(\"span\", {\n  className: css(styles.tableColumnHelpAction)\n}, variant === 'tooltip' ? React.createElement(Tooltip, Object.assign({\n  content: info\n}, tooltipProps), React.createElement(Button, {\n  variant: \"plain\",\n  \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n}, React.createElement(HelpIcon, {\n  noVerticalAlign: true\n}))) : React.createElement(Popover, Object.assign({\n  bodyContent: info\n}, popoverProps), React.createElement(Button, {\n  variant: \"plain\",\n  \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n}, React.createElement(HelpIcon, {\n  noVerticalAlign: true\n})))));\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';","map":{"version":3,"sources":["../../../../src/components/Table/HeaderCellInfoWrapper.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,QAAP,MAAe,kDAAf;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,qDAAnB;AACA,SAAS,MAAT,EAAiB,OAAjB,EAA0B,OAA1B,QAAqE,wBAArE;AACA,SAAS,SAAT,QAA0B,aAA1B;AAiCA,OAAO,MAAM,qBAAqB,GAAoD,CAAC;AACrF,EAAA,QADqF;AAErF,EAAA,IAFqF;AAGrF,EAAA,SAHqF;AAIrF,EAAA,OAAO,GAAG,SAJ2E;AAKrF,EAAA,YALqF;AAMrF,EAAA,YANqF;AAOrF,EAAA;AAPqF,CAAD,KASpF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,EAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,EAAyB,SAAzB;AAAnB,CAAA,EACG,OAAO,QAAP,KAAoB,QAApB,GAA+B,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EAAY,QAAZ,CAA/B,GAAmE,QADtE,EAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,EAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAR;AAApB,CAAA,EACG,OAAO,KAAK,SAAZ,GACC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,EAAA,OAAO,EAAE;AAAV,CAAA,EAAoB,YAApB,CAAR,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,EAAA,OAAO,EAAC,OAAT;AAAgB,gBAAa,SAAS,IAAK,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAA1C,IAAmD;AAAhF,CAAP,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,EAAA,eAAe,EAAA;AAAhB,CAAT,CADF,CADF,CADD,GAOC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,EAAA,WAAW,EAAE;AAAd,CAAA,EAAwB,YAAxB,CAAR,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,EAAA,OAAO,EAAC,OAAT;AAAgB,gBAAa,SAAS,IAAK,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAA1C,IAAmD;AAAhF,CAAP,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,EAAA,eAAe,EAAA;AAAhB,CAAT,CADF,CADF,CARJ,CAFF,CATK;AA4BP,qBAAqB,CAAC,WAAtB,GAAoC,uBAApC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport HelpIcon from \"@patternfly/react-icons/dist/esm/icons/help-icon\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Button, Tooltip, Popover } from '@patternfly/react-core';\nimport { TableText } from './TableText';\nexport const HeaderCellInfoWrapper = ({ children, info, className, variant = 'tooltip', popoverProps, tooltipProps, ariaLabel }) => (React.createElement(\"div\", { className: css(styles.tableColumnHelp, className) },\n    typeof children === 'string' ? React.createElement(TableText, null, children) : children,\n    React.createElement(\"span\", { className: css(styles.tableColumnHelpAction) }, variant === 'tooltip' ? (React.createElement(Tooltip, Object.assign({ content: info }, tooltipProps),\n        React.createElement(Button, { variant: \"plain\", \"aria-label\": ariaLabel || (typeof info === 'string' && info) || 'More info' },\n            React.createElement(HelpIcon, { noVerticalAlign: true })))) : (React.createElement(Popover, Object.assign({ bodyContent: info }, popoverProps),\n        React.createElement(Button, { variant: \"plain\", \"aria-label\": ariaLabel || (typeof info === 'string' && info) || 'More info' },\n            React.createElement(HelpIcon, { noVerticalAlign: true })))))));\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';\n//# sourceMappingURL=HeaderCellInfoWrapper.js.map"]},"metadata":{},"sourceType":"module"}