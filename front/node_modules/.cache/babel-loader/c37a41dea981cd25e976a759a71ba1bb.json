{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport const collapsible = (value, {\n  rowIndex,\n  columnIndex,\n  rowData,\n  column,\n  property\n}) => {\n  const {\n    extraParams: {\n      onCollapse,\n      rowLabeledBy = 'simple-node',\n      expandId = 'expand-toggle'\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n\n  function onToggle(event) {\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen, rowData, extraData);\n  }\n\n  return {\n    className: rowData.isOpen !== undefined && css(styles.tableToggle),\n    isVisible: !rowData.fullWidth,\n    children: React.createElement(CollapseColumn, {\n      \"aria-labelledby\": `${rowLabeledBy}${rowIndex} ${expandId}${rowIndex}`,\n      onToggle: onToggle,\n      id: expandId + rowIndex,\n      isOpen: rowData && rowData.isOpen\n    }, value)\n  };\n};\nexport const expandable = (value, {\n  rowData\n}) => rowData && rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\nexport const expandedRow = colSpan => {\n  const expandedRowFormatter = (value, {\n    columnIndex,\n    rowIndex,\n    rowData,\n    column: {\n      extraParams: {\n        contentId = 'expanded-content'\n      }\n    }\n  }) => value && rowData.hasOwnProperty('parent') && {\n    // todo: rewrite this logic, it is not type safe\n    colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + !!rowData.fullWidth : 1,\n    id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n    className: rowData.noPadding && css(styles.modifiers.noPadding)\n  };\n\n  return expandedRowFormatter;\n};","map":{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/collapsible.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,qDAAnB;AACA,SAAS,cAAT,QAA+B,sBAA/B;AACA,SAAS,oBAAT,QAAqC,4BAArC;AAGA,OAAO,MAAM,WAAW,GAAe,CACrC,KADqC,EAErC;AAAE,EAAA,QAAF;AAAY,EAAA,WAAZ;AAAyB,EAAA,OAAzB;AAAkC,EAAA,MAAlC;AAA0C,EAAA;AAA1C,CAFqC,KAGnC;AACF,QAAM;AACJ,IAAA,WAAW,EAAE;AAAE,MAAA,UAAF;AAAc,MAAA,YAAY,GAAG,aAA7B;AAA4C,MAAA,QAAQ,GAAG;AAAvD;AADT,MAEF,MAFJ;AAGA,QAAM,SAAS,GAAG;AAChB,IAAA,QADgB;AAEhB,IAAA,WAFgB;AAGhB,IAAA,MAHgB;AAIhB,IAAA;AAJgB,GAAlB;AAOA;;AAEG;;AACH,WAAS,QAAT,CAAkB,KAAlB,EAAwE;AACtE;AACA,IAAA,UAAU,IAAI,UAAU,CAAC,KAAD,EAAQ,QAAR,EAAkB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAtC,EAA8C,OAA9C,EAAuD,SAAvD,CAAxB;AACD;;AAED,SAAO;AACL,IAAA,SAAS,EAAE,OAAO,CAAC,MAAR,KAAmB,SAAnB,IAAgC,GAAG,CAAC,MAAM,CAAC,WAAR,CADzC;AAEL,IAAA,SAAS,EAAE,CAAC,OAAO,CAAC,SAFf;AAGL,IAAA,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAA,yBACI,GAAG,YAAY,GAAG,QAAQ,IAAI,QAAQ,GAAG,QAAQ,EADrD;AAEb,MAAA,QAAQ,EAAE,QAFG;AAGb,MAAA,EAAE,EAAE,QAAQ,GAAG,QAHF;AAIb,MAAA,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC;AAJd,KAAf,EAMG,KANH;AAJG,GAAP;AAcD,CApCM;AAsCP,OAAO,MAAM,UAAU,GAAe,CAAC,KAAD,EAA6B;AAAE,EAAA;AAAF,CAA7B,KACpC,OAAO,IAAI,OAAO,CAAC,cAAR,CAAuB,QAAvB,CAAX,GAA8C,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB,IAArB,EAAuB,KAAvB,CAA9C,GAAqG,KADhG;AAGP,OAAO,MAAM,WAAW,GAAI,OAAD,IAAqB;AAC9C,QAAM,oBAAoB,GAAG,CAC3B,KAD2B,EAE3B;AACE,IAAA,WADF;AAEE,IAAA,QAFF;AAGE,IAAA,OAHF;AAIE,IAAA,MAAM,EAAE;AACN,MAAA,WAAW,EAAE;AAAE,QAAA,SAAS,GAAG;AAAd;AADP;AAJV,GAF2B,KAW3B,KAAK,IACL,OAAO,CAAC,cAAR,CAAuB,QAAvB,CADA,IACoC;AAClC;AACA,IAAA,OAAO,EAAE,CAAC,OAAO,CAAC,KAAT,IAAkB,OAAO,CAAC,KAAR,CAAc,MAAd,KAAyB,CAA3C,GAA+C,OAAO,GAAI,CAAC,CAAC,OAAO,CAAC,SAApE,GAAwF,CAF/D;AAGlC,IAAA,EAAE,EAAE,SAAS,GAAG,QAAZ,IAAwB,WAAW,GAAG,MAAM,WAAT,GAAuB,EAA1D,CAH8B;AAIlC,IAAA,SAAS,EAAE,OAAO,CAAC,SAAR,IAAqB,GAAG,CAAC,MAAM,CAAC,SAAP,CAAiB,SAAlB;AAJD,GAZtC;;AAkBA,SAAO,oBAAP;AACD,CApBM","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport const collapsible = (value, { rowIndex, columnIndex, rowData, column, property }) => {\n    const { extraParams: { onCollapse, rowLabeledBy = 'simple-node', expandId = 'expand-toggle' } } = column;\n    const extraData = {\n        rowIndex,\n        columnIndex,\n        column,\n        property\n    };\n    /**\n     * @param {React.MouseEvent} event - Mouse event\n     */\n    function onToggle(event) {\n        // tslint:disable-next-line:no-unused-expression\n        onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen, rowData, extraData);\n    }\n    return {\n        className: rowData.isOpen !== undefined && css(styles.tableToggle),\n        isVisible: !rowData.fullWidth,\n        children: (React.createElement(CollapseColumn, { \"aria-labelledby\": `${rowLabeledBy}${rowIndex} ${expandId}${rowIndex}`, onToggle: onToggle, id: expandId + rowIndex, isOpen: rowData && rowData.isOpen }, value))\n    };\n};\nexport const expandable = (value, { rowData }) => rowData && rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\nexport const expandedRow = (colSpan) => {\n    const expandedRowFormatter = (value, { columnIndex, rowIndex, rowData, column: { extraParams: { contentId = 'expanded-content' } } }) => value &&\n        rowData.hasOwnProperty('parent') && {\n        // todo: rewrite this logic, it is not type safe\n        colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + !!rowData.fullWidth : 1,\n        id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n        className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n    return expandedRowFormatter;\n};\n//# sourceMappingURL=collapsible.js.map"]},"metadata":{},"sourceType":"module"}