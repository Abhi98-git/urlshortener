{"ast":null,"code":"import { scopeColTransformer, selectable, cellActions, emptyCol, mapProps, collapsible, emptyTD, expandedRow, parentId, editable, favoritable, sortableFavorites } from './transformers';\nimport { defaultTitle } from './formatters';\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\n\nconst generateHeader = ({\n  transforms: origTransforms,\n  formatters: origFormatters,\n  columnTransforms,\n  header\n}, title) => Object.assign(Object.assign({}, header), {\n  label: title,\n  transforms: [scopeColTransformer, emptyCol, ...(origTransforms || []), ...(columnTransforms || []), ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\n\n\nconst generateCell = ({\n  cellFormatters,\n  cellTransforms,\n  columnTransforms,\n  cell\n}, // eslint-disable-next-line @typescript-eslint/no-unused-vars\nextra) => Object.assign(Object.assign({}, cell), {\n  transforms: [...(cellTransforms || []), ...(columnTransforms || []), ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []), mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [defaultTitle, ...(cellFormatters || []), ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])]\n});\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\n\n\nconst mapHeader = (column, extra, key, ...props) => {\n  const title = column.hasOwnProperty('title') ? column.title : column;\n  let dataLabel = `column-${key}`;\n\n  if (column.hasOwnProperty('dataLabel')) {\n    dataLabel = column.dataLabel;\n  } else if (typeof title === 'string') {\n    dataLabel = title;\n  }\n\n  return {\n    property: typeof title === 'string' && title.toLowerCase().trim().replace(/\\s/g, '-') || `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: Object.assign(Object.assign({\n      'data-label': dataLabel,\n      'data-key': key\n    }, column.hasOwnProperty('props') ? column.props : {}), props)\n  };\n};\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst selectableTransforms = ({\n  onSelect,\n  canSelectAll\n}) => [...(onSelect ? [{\n  title: '',\n  transforms: canSelectAll && [selectable] || null,\n  cellTransforms: [selectable]\n}] : [])];\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst favoritesTransforms = ({\n  onFavorite,\n  onSort,\n  sortBy,\n  canSortFavorites,\n  firstUserColumnIndex\n}) => [...(onFavorite ? [{\n  title: '',\n  transforms: onSort && canSortFavorites ? [sortableFavorites({\n    onSort,\n    // favorites should be just before the first user-defined column\n    columnIndex: firstUserColumnIndex - 1,\n    sortBy\n  })] : [emptyTD],\n  cellTransforms: [favoritable]\n}] : [])];\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst actionsTransforms = ({\n  actions,\n  actionResolver,\n  areActionsDisabled\n}) => [...(actionResolver || actions ? [{\n  title: '',\n  transforms: [emptyTD],\n  cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n}] : [])];\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nconst collapsibleTransforms = (header, {\n  onCollapse\n}) => [...(onCollapse ? [{\n  title: '',\n  transforms: [emptyTD],\n  cellTransforms: [collapsible, expandedRow(header.length)]\n}] : [])];\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\n\n\nconst addAdditionalCellTranforms = (cell, additional) => Object.assign(Object.assign({}, cell.hasOwnProperty('title') ? cell : {\n  title: cell\n}), {\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\n\n\nconst expandContent = (header, extra) => {\n  if (!extra.onCollapse && !extra.onExpand) {\n    return header;\n  }\n\n  return header.map(cell => {\n    const parentIdCell = addAdditionalCellTranforms(cell, parentId);\n    return addAdditionalCellTranforms(parentIdCell, expandedRow(header.length));\n  });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\n\n\nexport const mapOpenedRows = (rows, children) => rows.reduce((acc, curr, key) => {\n  if (curr.hasOwnProperty('parent')) {\n    const parent = acc.length > 0 && acc[acc.length - 1];\n\n    if (parent) {\n      acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n\n      if (curr.hasOwnProperty('compoundParent')) {\n        // if this is compound expand, check for any open child cell\n        acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some(oneRow => oneRow.props.rowData.cells.some(oneCell => oneCell.props && oneCell.props.isOpen));\n      }\n    }\n  } else {\n    acc = [...acc, Object.assign(Object.assign({}, curr), {\n      rows: [children[key]]\n    })];\n  }\n\n  return acc;\n}, []);\n\nconst rowEditTransforms = ({\n  onRowEdit\n}) => [...(onRowEdit ? [{\n  title: '',\n  cellTransforms: [editable]\n}] : [])];\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\n\n\nexport const calculateColumns = (headerRows, extra) => headerRows && [...collapsibleTransforms(headerRows, extra), ...selectableTransforms(extra), ...favoritesTransforms(extra), ...expandContent(headerRows, extra), ...rowEditTransforms(extra), ...actionsTransforms(extra)].map((oneCol, key) => Object.assign({}, mapHeader(oneCol, extra, key)));","map":{"version":3,"sources":["../../../../../src/components/Table/utils/headerUtils.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { scopeColTransformer, selectable, cellActions, emptyCol, mapProps, collapsible, emptyTD, expandedRow, parentId, editable, favoritable, sortableFavorites } from './transformers';\nimport { defaultTitle } from './formatters';\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = ({ transforms: origTransforms, formatters: origFormatters, columnTransforms, header }, title) => (Object.assign(Object.assign({}, header), { label: title, transforms: [\n        scopeColTransformer,\n        emptyCol,\n        ...(origTransforms || []),\n        ...(columnTransforms || []),\n        ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])\n    ], formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])] }));\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = ({ cellFormatters, cellTransforms, columnTransforms, cell }, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nextra) => (Object.assign(Object.assign({}, cell), { transforms: [\n        ...(cellTransforms || []),\n        ...(columnTransforms || []),\n        ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []),\n        mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n    ], formatters: [\n        defaultTitle,\n        ...(cellFormatters || []),\n        ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])\n    ] }));\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column, extra, key, ...props) => {\n    const title = (column.hasOwnProperty('title') ? column.title : column);\n    let dataLabel = `column-${key}`;\n    if (column.hasOwnProperty('dataLabel')) {\n        dataLabel = column.dataLabel;\n    }\n    else if (typeof title === 'string') {\n        dataLabel = title;\n    }\n    return {\n        property: (typeof title === 'string' &&\n            title\n                .toLowerCase()\n                .trim()\n                .replace(/\\s/g, '-')) ||\n            `column-${key}`,\n        extraParams: extra,\n        data: column.data,\n        header: generateHeader(column, title),\n        cell: generateCell(column, extra),\n        props: Object.assign(Object.assign({ 'data-label': dataLabel, 'data-key': key }, (column.hasOwnProperty('props') ? column.props : {})), props)\n    };\n};\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({ onSelect, canSelectAll }) => [\n    ...(onSelect\n        ? [\n            {\n                title: '',\n                transforms: (canSelectAll && [selectable]) || null,\n                cellTransforms: [selectable]\n            }\n        ]\n        : [])\n];\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst favoritesTransforms = ({ onFavorite, onSort, sortBy, canSortFavorites, firstUserColumnIndex }) => [\n    ...(onFavorite\n        ? [\n            {\n                title: '',\n                transforms: onSort && canSortFavorites\n                    ? [\n                        sortableFavorites({\n                            onSort,\n                            // favorites should be just before the first user-defined column\n                            columnIndex: firstUserColumnIndex - 1,\n                            sortBy\n                        })\n                    ]\n                    : [emptyTD],\n                cellTransforms: [favoritable]\n            }\n        ]\n        : [])\n];\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({ actions, actionResolver, areActionsDisabled }) => [\n    ...(actionResolver || actions\n        ? [\n            {\n                title: '',\n                transforms: [emptyTD],\n                cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n            }\n        ]\n        : [])\n];\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransforms = (header, { onCollapse }) => [\n    ...(onCollapse\n        ? [\n            {\n                title: '',\n                transforms: [emptyTD],\n                cellTransforms: [collapsible, expandedRow(header.length)]\n            }\n        ]\n        : [])\n];\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell, additional) => (Object.assign(Object.assign({}, (cell.hasOwnProperty('title') ? cell : { title: cell })), { cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional] }));\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\nconst expandContent = (header, extra) => {\n    if (!extra.onCollapse && !extra.onExpand) {\n        return header;\n    }\n    return header.map((cell) => {\n        const parentIdCell = addAdditionalCellTranforms(cell, parentId);\n        return addAdditionalCellTranforms(parentIdCell, expandedRow(header.length));\n    });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows, children) => rows.reduce((acc, curr, key) => {\n    if (curr.hasOwnProperty('parent')) {\n        const parent = acc.length > 0 && acc[acc.length - 1];\n        if (parent) {\n            acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n            if (curr.hasOwnProperty('compoundParent')) {\n                // if this is compound expand, check for any open child cell\n                acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some((oneRow) => oneRow.props.rowData.cells.some((oneCell) => oneCell.props && oneCell.props.isOpen));\n            }\n        }\n    }\n    else {\n        acc = [...acc, Object.assign(Object.assign({}, curr), { rows: [children[key]] })];\n    }\n    return acc;\n}, []);\nconst rowEditTransforms = ({ onRowEdit }) => [\n    ...(onRowEdit\n        ? [\n            {\n                title: '',\n                cellTransforms: [editable]\n            }\n        ]\n        : [])\n];\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows, extra) => headerRows &&\n    [\n        ...collapsibleTransforms(headerRows, extra),\n        ...selectableTransforms(extra),\n        ...favoritesTransforms(extra),\n        ...expandContent(headerRows, extra),\n        ...rowEditTransforms(extra),\n        ...actionsTransforms(extra)\n    ].map((oneCol, key) => (Object.assign({}, mapHeader(oneCol, extra, key))));\n//# sourceMappingURL=headerUtils.js.map"]},"metadata":{},"sourceType":"module"}