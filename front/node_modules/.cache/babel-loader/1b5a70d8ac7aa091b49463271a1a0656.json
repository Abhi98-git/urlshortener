{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport const EditableSelectInputCell = ({\n  value,\n  rowIndex,\n  cellIndex,\n  onSelect = () => {},\n  clearSelection,\n  isOpen = false,\n  onToggle = () => {},\n  selections = [''],\n  options = [],\n  props\n}) => {\n  const onSelectHandler = (event, newValue, isPlaceholder) => {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n\n  const onClear = event => {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n\n  const select = React.createElement(Select, Object.assign({}, props.editableSelectProps, {\n    onSelect: onSelectHandler\n  }, clearSelection && {\n    onClear\n  }, {\n    isOpen: isOpen,\n    onToggle: onToggle,\n    selections: selections\n  }), options);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, Array.isArray(value) ? value.join(', ') : value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, select, React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';","map":{"version":3,"sources":["../../../../src/components/Table/EditableSelectInputCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,MAAT,QAAwD,wBAAxD;AACA,OAAO,YAAP,MAAyB,gEAAzB;AACA,OAAO,UAAP,MAAuB,mDAAvB;AA8CA,OAAO,MAAM,uBAAuB,GAAsD,CAAC;AACzF,EAAA,KADyF;AAEzF,EAAA,QAFyF;AAGzF,EAAA,SAHyF;AAIzF,EAAA,QAAQ,GAAG,MAAK,CAAG,CAJsE;AAKzF,EAAA,cALyF;AAMzF,EAAA,MAAM,GAAG,KANgF;AAOzF,EAAA,QAAQ,GAAG,MAAK,CAAG,CAPsE;AAQzF,EAAA,UAAU,GAAG,CAAC,EAAD,CAR4E;AASzF,EAAA,OAAO,GAAG,EAT+E;AAUzF,EAAA;AAVyF,CAAD,KAW3D;AAC7B,QAAM,eAAe,GAAG,CACtB,KADsB,EAEtB,QAFsB,EAGtB,aAHsB,KAIpB;AACF,IAAA,QAAQ,CAAC,QAAD,EAAW,KAAX,EAAkB,QAAlB,EAA4B,SAA5B,EAAuC,aAAvC,CAAR;AACD,GAND;;AAQA,QAAM,OAAO,GAAI,KAAD,IAA4B;AAC1C,IAAA,cAAc,CAAC,QAAD,EAAW,SAAX,EAAsB,KAAtB,CAAd;AACD,GAFD;;AAIA,QAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,KAAK,CAAC,mBADL,EACwB;AAC7B,IAAA,QAAQ,EAAE;AADmB,GADxB,EAGA,cAAc,IAAI;AAAE,IAAA;AAAF,GAHlB,EAG8B;AACnC,IAAA,MAAM,EAAE,MAD2B;AAEnC,IAAA,QAAQ,EAAE,QAFyB;AAGnC,IAAA,UAAU,EAAE;AAHuB,GAH9B,CAAP,EAQG,OARH,CADF;AAaA,SACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,YAAY,CAAC;AAA7B,GAAA,EAA+C,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAK,CAAC,IAAN,CAAW,IAAX,CAAvB,GAA0C,KAAzF,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,YAAY,CAAC;AAA7B,GAAA,EACG,MADH,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,cAAZ,EAA4B,UAAU,CAAC,SAAX,CAAqB,KAAjD,CAAnB;AAA0E,iBAAY;AAAtF,GAAA,EACG,KAAK,CAAC,SADT,CAFF,CAFF,CADF;AAWD,CAhDM;AAiDP,uBAAuB,CAAC,WAAxB,GAAsC,yBAAtC","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport const EditableSelectInputCell = ({ value, rowIndex, cellIndex, onSelect = () => { }, clearSelection, isOpen = false, onToggle = () => { }, selections = [''], options = [], props }) => {\n    const onSelectHandler = (event, newValue, isPlaceholder) => {\n        onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n    };\n    const onClear = (event) => {\n        clearSelection(rowIndex, cellIndex, event);\n    };\n    const select = (React.createElement(Select, Object.assign({}, props.editableSelectProps, { onSelect: onSelectHandler }, (clearSelection && { onClear }), { isOpen: isOpen, onToggle: onToggle, selections: selections }), options));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: inlineStyles.inlineEditValue }, Array.isArray(value) ? value.join(', ') : value),\n        React.createElement(\"div\", { className: inlineStyles.inlineEditInput },\n            select,\n            React.createElement(\"div\", { className: css(formStyles.formHelperText, formStyles.modifiers.error), \"aria-live\": \"polite\" }, props.errorText))));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';\n//# sourceMappingURL=EditableSelectInputCell.js.map"]},"metadata":{},"sourceType":"module"}