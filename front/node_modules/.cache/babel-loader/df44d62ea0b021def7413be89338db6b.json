{"ast":null,"code":"const Config = require(\"../config.json\");\n\nclass API {\n  constructor() {\n    this.url = Config.BASE_URL;\n  }\n\n  async getServerStatus() {\n    const status = await fetch(`${this.url}/health`).then(resp => resp.json());\n    return status;\n  }\n\n  async getUrls() {\n    const urls = await fetch(`${this.url}/urls`).then(resp => resp.json());\n    return urls;\n  }\n\n  async addUrl(data) {\n    if (data.url.substr(0, 4) !== \"http\") data.url = \"http://\" + data.url;\n    if (data.route.substr(0, 1) !== \"/\") data.route = \"/\" + data.route;\n    const result = await fetch();\n  }\n\n}\n\nexport default new API();","map":{"version":3,"sources":["/opt/app/src/utils/api.js"],"names":["Config","require","API","url","BASE_URL","getServerStatus","status","fetch","then","resp","json","getUrls","urls","addUrl","data","substr","route","result"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AAEA,MAAMC,GAAN,CAAU;AAAA;AAAA,SACRC,GADQ,GACFH,MAAM,CAACI,QADL;AAAA;;AAGa,QAAfC,eAAe,GAAG;AACtB,UAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,GAAI,SAAb,CAAL,CAClBK,IADkB,CACbC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADK,CAArB;AAEA,WAAOJ,MAAP;AACD;;AAEY,QAAPK,OAAO,GAAG;AACd,UAAMC,IAAI,GAAG,MAAML,KAAK,CAAE,GAAE,KAAKJ,GAAI,OAAb,CAAL,CAChBK,IADgB,CACXC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADG,CAAnB;AAGA,WAAOE,IAAP;AACD;;AAEW,QAANC,MAAM,CAACC,IAAD,EAAO;AACjB,QAAIA,IAAI,CAACX,GAAL,CAASY,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,MAA9B,EAAsCD,IAAI,CAACX,GAAL,GAAW,YAAYW,IAAI,CAACX,GAA5B;AACtC,QAAIW,IAAI,CAACE,KAAL,CAAWD,MAAX,CAAkB,CAAlB,EAAqB,CAArB,MAA4B,GAAhC,EAAqCD,IAAI,CAACE,KAAL,GAAa,MAAMF,IAAI,CAACE,KAAxB;AAErC,UAAMC,MAAM,GAAG,MAAMV,KAAK,EAA1B;AACD;;AArBO;;AAwBV,eAAe,IAAIL,GAAJ,EAAf","sourcesContent":["const Config = require(\"../config.json\");\n\nclass API {\n  url = Config.BASE_URL;\n\n  async getServerStatus() {\n    const status = await fetch(`${this.url}/health`)\n      .then(resp => resp.json());\n    return status;\n  }\n\n  async getUrls() {\n    const urls = await fetch(`${this.url}/urls`)\n      .then(resp => resp.json());\n\n    return urls;\n  }\n\n  async addUrl(data) {\n    if (data.url.substr(0, 4) !== \"http\") data.url = \"http://\" + data.url;\n    if (data.route.substr(0, 1) !== \"/\") data.route = \"/\" + data.route;\n\n    const result = await fetch()\n  }\n}\n\nexport default new API();"]},"metadata":{},"sourceType":"module"}