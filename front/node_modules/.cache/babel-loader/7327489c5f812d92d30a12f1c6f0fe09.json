{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\n\nconst flagVisibility = rows => {\n  const visibleRows = rows.filter(oneRow => !oneRow.parent || oneRow.isExpanded);\n\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\nclass ContextBody extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onRow = (row, rowProps) => {\n      const {\n        onRowClick,\n        onRow\n      } = this.props;\n      const extendedRowProps = Object.assign(Object.assign({}, rowProps), onRow ? onRow(row, rowProps) : {});\n      return {\n        row,\n        rowProps: extendedRowProps,\n        onMouseDown: event => {\n          const computedData = {\n            isInput: event.target.tagName !== 'INPUT',\n            isButton: event.target.tagName !== 'BUTTON'\n          };\n          onRowClick(event, row, rowProps, computedData);\n        }\n      };\n    };\n\n    this.mapCells = (headerData, row, rowKey) => {\n      // column indexes start after generated optional columns like collapsible or select column(s)\n      const {\n        firstUserColumnIndex\n      } = headerData[0].extraParams;\n      const isFullWidth = row && row.fullWidth; // typically you'd want to map each cell to its column header, but in the case of fullWidth\n      // the first column could be the Select and/or Expandable column\n\n      let additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n      return Object.assign({}, row && (row.cells || row).reduce((acc, cell, cellIndex) => {\n        const isCellObject = cell === Object(cell);\n        const isCellFunction = cell && typeof cell.title === 'function';\n        let formatters = [];\n\n        if (isCellObject && cell.formatters) {\n          // give priority to formatters specified on the cell object\n          // expandable example:\n          // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n          formatters = cell.formatters;\n        } else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n          // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n          // to the first user column's header formatters\n          formatters = headerData[firstUserColumnIndex].cell.formatters;\n        }\n\n        let mappedCellTitle = cell;\n\n        if (isCellObject && isCellFunction) {\n          mappedCellTitle = cell.title(cell.props.value, rowKey, cellIndex, cell.props);\n        } else if (isCellObject) {\n          mappedCellTitle = cell.title;\n        }\n\n        const mappedCell = {\n          [headerData[cellIndex + additionalColsIndexShift].property]: {\n            title: mappedCellTitle,\n            formatters,\n            props: Object.assign({\n              isVisible: true\n            }, isCellObject ? cell.props : null)\n          }\n        }; // increment the shift index when a cell spans multiple columns\n\n        if (isCellObject && cell.props && cell.props.colSpan) {\n          additionalColsIndexShift += cell.props.colSpan - 1;\n        }\n\n        return Object.assign(Object.assign({}, acc), mappedCell);\n      }, {\n        secretTableRowKeyId: row.id !== undefined ? row.id : rowKey\n      }));\n    };\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      className,\n      headerData,\n      rows,\n      rowKey,\n      children,\n      onRowClick\n    } = _a,\n          props = __rest(_a, [\"className\", \"headerData\", \"rows\", \"rowKey\", \"children\", \"onRowClick\"]);\n\n    let mappedRows;\n\n    if (headerData.length > 0) {\n      mappedRows = rows.map((oneRow, oneRowKey) => Object.assign(Object.assign(Object.assign({}, oneRow), this.mapCells(headerData, oneRow, oneRowKey)), {\n        isExpanded: isRowExpanded(oneRow, rows),\n        isHeightAuto: oneRow.heightAuto || false,\n        isFirst: oneRowKey === 0,\n        isLast: oneRowKey === rows.length - 1,\n        isFirstVisible: false,\n        isLastVisible: false\n      }));\n      flagVisibility(mappedRows);\n    }\n\n    return React.createElement(React.Fragment, null, mappedRows && React.createElement(BaseBody, Object.assign({}, props, {\n      mappedRows: mappedRows,\n      rows: mappedRows,\n      onRow: this.onRow,\n      rowKey: rowKey,\n      className: className\n    })));\n  }\n\n}\n\nexport const TableBody = _a => {\n  var {\n    className = '',\n    children = null,\n    rowKey = 'secretTableRowKeyId',\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    onRow = (...args) => Object,\n    onRowClick = (event, row, rowProps, computedData) =>\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    undefined\n  } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"rowKey\", \"onRow\", \"onRowClick\"]);\n\n  return React.createElement(TableContext.Consumer, null, _a => {\n    var {\n      headerData = [],\n      rows = []\n    } = _a,\n        rest = __rest(_a, [\"headerData\", \"rows\"]);\n\n    return React.createElement(ContextBody, Object.assign({\n      headerData: headerData,\n      rows: rows,\n      onRow: onRow,\n      className: className,\n      rowKey: rowKey,\n      onRowClick: onRowClick\n    }, props, rest), children);\n  });\n};","map":{"version":3,"sources":["../../../../src/components/Table/Body.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\nconst flagVisibility = (rows) => {\n    const visibleRows = rows.filter((oneRow) => !oneRow.parent || oneRow.isExpanded);\n    if (visibleRows.length > 0) {\n        visibleRows[0].isFirstVisible = true;\n        visibleRows[visibleRows.length - 1].isLastVisible = true;\n    }\n};\nclass ContextBody extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onRow = (row, rowProps) => {\n            const { onRowClick, onRow } = this.props;\n            const extendedRowProps = Object.assign(Object.assign({}, rowProps), (onRow ? onRow(row, rowProps) : {}));\n            return {\n                row,\n                rowProps: extendedRowProps,\n                onMouseDown: (event) => {\n                    const computedData = {\n                        isInput: event.target.tagName !== 'INPUT',\n                        isButton: event.target.tagName !== 'BUTTON'\n                    };\n                    onRowClick(event, row, rowProps, computedData);\n                }\n            };\n        };\n        this.mapCells = (headerData, row, rowKey) => {\n            // column indexes start after generated optional columns like collapsible or select column(s)\n            const { firstUserColumnIndex } = headerData[0].extraParams;\n            const isFullWidth = row && row.fullWidth;\n            // typically you'd want to map each cell to its column header, but in the case of fullWidth\n            // the first column could be the Select and/or Expandable column\n            let additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n            return Object.assign({}, (row &&\n                (row.cells || row).reduce((acc, cell, cellIndex) => {\n                    const isCellObject = cell === Object(cell);\n                    const isCellFunction = cell && typeof cell.title === 'function';\n                    let formatters = [];\n                    if (isCellObject && cell.formatters) {\n                        // give priority to formatters specified on the cell object\n                        // expandable example:\n                        // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n                        formatters = cell.formatters;\n                    }\n                    else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n                        // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n                        // to the first user column's header formatters\n                        formatters = headerData[firstUserColumnIndex].cell.formatters;\n                    }\n                    let mappedCellTitle = cell;\n                    if (isCellObject && isCellFunction) {\n                        mappedCellTitle = cell.title(cell.props.value, rowKey, cellIndex, cell.props);\n                    }\n                    else if (isCellObject) {\n                        mappedCellTitle = cell.title;\n                    }\n                    const mappedCell = {\n                        [headerData[cellIndex + additionalColsIndexShift].property]: {\n                            title: mappedCellTitle,\n                            formatters,\n                            props: Object.assign({ isVisible: true }, (isCellObject ? cell.props : null))\n                        }\n                    };\n                    // increment the shift index when a cell spans multiple columns\n                    if (isCellObject && cell.props && cell.props.colSpan) {\n                        additionalColsIndexShift += cell.props.colSpan - 1;\n                    }\n                    return Object.assign(Object.assign({}, acc), mappedCell);\n                }, { secretTableRowKeyId: row.id !== undefined ? row.id : rowKey })));\n        };\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { className, headerData, rows, rowKey, children, onRowClick } = _a, props = __rest(_a, [\"className\", \"headerData\", \"rows\", \"rowKey\", \"children\", \"onRowClick\"]);\n        let mappedRows;\n        if (headerData.length > 0) {\n            mappedRows = rows.map((oneRow, oneRowKey) => (Object.assign(Object.assign(Object.assign({}, oneRow), this.mapCells(headerData, oneRow, oneRowKey)), { isExpanded: isRowExpanded(oneRow, rows), isHeightAuto: oneRow.heightAuto || false, isFirst: oneRowKey === 0, isLast: oneRowKey === rows.length - 1, isFirstVisible: false, isLastVisible: false })));\n            flagVisibility(mappedRows);\n        }\n        return (React.createElement(React.Fragment, null, mappedRows && (React.createElement(BaseBody, Object.assign({}, props, { mappedRows: mappedRows, rows: mappedRows, onRow: this.onRow, rowKey: rowKey, className: className })))));\n    }\n}\nexport const TableBody = (_a) => {\n    var { className = '', children = null, rowKey = 'secretTableRowKeyId', \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    onRow = (...args) => Object, onRowClick = (event, row, rowProps, computedData) => \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    undefined } = _a, props = __rest(_a, [\"className\", \"children\", \"rowKey\", \"onRow\", \"onRowClick\"]);\n    return (React.createElement(TableContext.Consumer, null, (_a) => {\n        var { headerData = [], rows = [] } = _a, rest = __rest(_a, [\"headerData\", \"rows\"]);\n        return (React.createElement(ContextBody, Object.assign({ headerData: headerData, rows: rows, onRow: onRow, className: className, rowKey: rowKey, onRowClick: onRowClick }, props, rest), children));\n    }));\n};\n//# sourceMappingURL=Body.js.map"]},"metadata":{},"sourceType":"module"}