{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from \"@patternfly/react-core/dist/esm/components/Tooltip/Tooltip\";\n\nconst ThBase = _a => {\n  var {\n    children,\n    className,\n    component = 'th',\n    scope = 'col',\n    textCenter = false,\n    sort = null,\n    modifier,\n    select = null,\n    tooltip = '',\n    onMouseEnter: onMouseEnterProp = () => {},\n    width,\n    visibility,\n    innerRef,\n    info: infoProps\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"scope\", \"textCenter\", \"sort\", \"modifier\", \"select\", \"tooltip\", \"onMouseEnter\", \"width\", \"visibility\", \"innerRef\", \"info\"]);\n\n  const [showTooltip, setShowTooltip] = React.useState(false);\n\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  let sortParams = null;\n\n  if (sort) {\n    if (sort.isFavorites) {\n      sortParams = sortableFavorites({\n        onSort: sort === null || sort === void 0 ? void 0 : sort.onSort,\n        columnIndex: sort.columnIndex,\n        sortBy: sort.sortBy\n      })();\n    } else {\n      sortParams = sortable(children, {\n        columnIndex: sort.columnIndex,\n        column: {\n          extraParams: {\n            sortBy: sort.sortBy,\n            onSort: sort === null || sort === void 0 ? void 0 : sort.onSort\n          }\n        }\n      });\n    }\n  }\n\n  const selectParams = select ? selectable(children, {\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: 'checkbox',\n        allRowsSelected: select.isSelected\n      }\n    }\n  }) : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility ? classNames(...visibility.map(vis => Visibility[vis]))() : null;\n  let transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || children; // info can wrap other transformedChildren\n\n  let infoParams = null;\n\n  if (infoProps) {\n    infoParams = info(infoProps)(transformedChildren);\n    transformedChildren = infoParams.children;\n  }\n\n  const merged = mergeProps(sortParams, selectParams, widthParams, visibilityParams, infoParams);\n\n  const {\n    // ignore the merged children since we transform them ourselves so we can wrap it with info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    children: mergedChildren = null,\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component\n  } = merged,\n        mergedProps = __rest(merged, [\"children\", \"isVisible\", \"className\", \"component\"]);\n\n  const cell = React.createElement(MergedComponent, Object.assign({\n    onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp,\n    scope: component === 'th' && children ? scope : null,\n    ref: innerRef,\n    className: css(className, textCenter && styles.modifiers.center, modifier && styles.modifiers[modifier], mergedClassName)\n  }, mergedProps, props), transformedChildren);\n  const canDefault = tooltip === '' ? typeof children === 'string' : true;\n  return tooltip !== null && canDefault && showTooltip ? React.createElement(Tooltip, {\n    content: tooltip || tooltip === '' && children,\n    isVisible: true\n  }, cell) : cell;\n};\n\nexport const Th = React.forwardRef((props, ref) => React.createElement(ThBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTh.displayName = 'Th';","map":{"version":3,"sources":["../../../../src/components/TableComposable/Th.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from \"@patternfly/react-core/dist/esm/components/Tooltip/Tooltip\";\nconst ThBase = (_a) => {\n    var { children, className, component = 'th', scope = 'col', textCenter = false, sort = null, modifier, select = null, tooltip = '', onMouseEnter: onMouseEnterProp = () => { }, width, visibility, innerRef, info: infoProps } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"scope\", \"textCenter\", \"sort\", \"modifier\", \"select\", \"tooltip\", \"onMouseEnter\", \"width\", \"visibility\", \"innerRef\", \"info\"]);\n    const [showTooltip, setShowTooltip] = React.useState(false);\n    const onMouseEnter = (event) => {\n        if (event.target.offsetWidth < event.target.scrollWidth) {\n            !showTooltip && setShowTooltip(true);\n        }\n        else {\n            showTooltip && setShowTooltip(false);\n        }\n        onMouseEnterProp(event);\n    };\n    let sortParams = null;\n    if (sort) {\n        if (sort.isFavorites) {\n            sortParams = sortableFavorites({\n                onSort: sort === null || sort === void 0 ? void 0 : sort.onSort,\n                columnIndex: sort.columnIndex,\n                sortBy: sort.sortBy\n            })();\n        }\n        else {\n            sortParams = sortable(children, {\n                columnIndex: sort.columnIndex,\n                column: {\n                    extraParams: {\n                        sortBy: sort.sortBy,\n                        onSort: sort === null || sort === void 0 ? void 0 : sort.onSort\n                    }\n                }\n            });\n        }\n    }\n    const selectParams = select\n        ? selectable(children, {\n            column: {\n                extraParams: {\n                    onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n                    selectVariant: 'checkbox',\n                    allRowsSelected: select.isSelected\n                }\n            }\n        })\n        : null;\n    const widthParams = width ? cellWidth(width)() : null;\n    const visibilityParams = visibility\n        ? classNames(...visibility.map((vis) => Visibility[vis]))()\n        : null;\n    let transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || children;\n    // info can wrap other transformedChildren\n    let infoParams = null;\n    if (infoProps) {\n        infoParams = info(infoProps)(transformedChildren);\n        transformedChildren = infoParams.children;\n    }\n    const merged = mergeProps(sortParams, selectParams, widthParams, visibilityParams, infoParams);\n    const { \n    // ignore the merged children since we transform them ourselves so we can wrap it with info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    children: mergedChildren = null, \n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null, className: mergedClassName = '', component: MergedComponent = component } = merged, mergedProps = __rest(merged, [\"children\", \"isVisible\", \"className\", \"component\"]);\n    const cell = (React.createElement(MergedComponent, Object.assign({ onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp, scope: component === 'th' && children ? scope : null, ref: innerRef, className: css(className, textCenter && styles.modifiers.center, modifier && styles.modifiers[modifier], mergedClassName) }, mergedProps, props), transformedChildren));\n    const canDefault = tooltip === '' ? typeof children === 'string' : true;\n    return tooltip !== null && canDefault && showTooltip ? (React.createElement(Tooltip, { content: tooltip || (tooltip === '' && children), isVisible: true }, cell)) : (cell);\n};\nexport const Th = React.forwardRef((props, ref) => (React.createElement(ThBase, Object.assign({}, props, { innerRef: ref }))));\nTh.displayName = 'Th';\n//# sourceMappingURL=Th.js.map"]},"metadata":{},"sourceType":"module"}