{"ast":null,"code":"const hasCompoundParentsExpanded = (parentId, compoundParent, rows) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].cells[compoundParent].props.isOpen;\n    }\n  }\n\n  return false;\n};\n\nconst hasParentsExpanded = (parentId, rows) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].isOpen;\n    }\n  }\n\n  return false;\n};\n\nexport const isRowExpanded = (row, rows) => {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n\n  return undefined;\n};\nexport const getErrorTextByValidator = (validatorName, validators) => {\n  const result = validators.filter(validator => validator.name === validatorName);\n  return result[0].errorText;\n};\nexport const cancelCellEdits = row => {\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    delete cell.props.editableValue;\n    cell.props.isValid = true; // for editable selects, revert the selected property to its original value\n\n    if (cell.props.selected) {\n      cell.props.selected = cell.props.value;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\nexport const validateCellEdits = (row, type, validationErrors, missingPropErrorTxt = 'Validation requires unique name property for row cells') => {\n  row.isValid = Object.keys(validationErrors).length ? false : true;\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        const errorMsg = Object.keys(validationErrors).filter(validatorName => validationErrors[validatorName].includes(cell.props.name)).map(validatorName => getErrorTextByValidator(validatorName, row.rowEditValidationRules));\n\n        if (errorMsg.length) {\n          cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n\n          if (cell.props.name === undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n          }\n        } else {\n          delete cell.props.errorText;\n          cell.props.isValid = true;\n        }\n      }\n    }\n  });\n  return row;\n};\nexport const applyCellEdits = (row, type) => {\n  row.cells.forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null; // sync for validation\n\n    if (hasValue && !hasEditableValue) {\n      cell.props.editableValue = cell.props.value;\n    }\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        cell.props.value = cell.props.editableValue;\n        cell.props.isValid = true;\n        delete cell.props.errorText;\n      }\n\n      delete cell.props.editableValue;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\n\nconst camelize = s => s.toUpperCase().replace('-', '').replace('_', '');\n\nexport const toCamel = s => s.replace(/([-_][a-z])/gi, camelize);\n/**\n * @param {string} input - String to capitalize\n */\n\nexport function capitalize(input) {\n  return input[0].toUpperCase() + input.substring(1);\n}","map":{"version":3,"sources":["../../../../../src/components/Table/utils/utils.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["const hasCompoundParentsExpanded = (parentId, compoundParent, rows) => {\n    // max rows.length parents\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const i of rows) {\n        if (rows[parentId].hasOwnProperty('parent')) {\n            parentId = rows[parentId].parent;\n        }\n        else {\n            return rows[parentId].cells[compoundParent].props.isOpen;\n        }\n    }\n    return false;\n};\nconst hasParentsExpanded = (parentId, rows) => {\n    // max rows.length parents\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const i of rows) {\n        if (rows[parentId].hasOwnProperty('parent')) {\n            parentId = rows[parentId].parent;\n        }\n        else {\n            return rows[parentId].isOpen;\n        }\n    }\n    return false;\n};\nexport const isRowExpanded = (row, rows) => {\n    if (row.parent !== undefined) {\n        if (row.hasOwnProperty('compoundParent')) {\n            return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n        }\n        return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n    }\n    return undefined;\n};\nexport const getErrorTextByValidator = (validatorName, validators) => {\n    const result = validators.filter(validator => validator.name === validatorName);\n    return result[0].errorText;\n};\nexport const cancelCellEdits = (row) => {\n    row.cells.forEach(cell => {\n        delete cell.props.errorText;\n        delete cell.props.editableValue;\n        cell.props.isValid = true;\n        // for editable selects, revert the selected property to its original value\n        if (cell.props.selected) {\n            cell.props.selected = cell.props.value;\n        }\n    });\n    row.isEditable = !row.isEditable;\n    row.isValid = true;\n    return row;\n};\nexport const validateCellEdits = (row, type, validationErrors, missingPropErrorTxt = 'Validation requires unique name property for row cells') => {\n    row.isValid = Object.keys(validationErrors).length ? false : true;\n    row.cells.forEach(cell => {\n        delete cell.props.errorText;\n        const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n        const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n        if (cell.props && hasValue && hasEditableValue) {\n            if (type === 'save') {\n                const errorMsg = Object.keys(validationErrors)\n                    .filter(validatorName => validationErrors[validatorName].includes(cell.props.name))\n                    .map(validatorName => getErrorTextByValidator(validatorName, row.rowEditValidationRules));\n                if (errorMsg.length) {\n                    cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n                    if (cell.props.name === undefined) {\n                        // eslint-disable-next-line no-console\n                        console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n                    }\n                }\n                else {\n                    delete cell.props.errorText;\n                    cell.props.isValid = true;\n                }\n            }\n        }\n    });\n    return row;\n};\nexport const applyCellEdits = (row, type) => {\n    row.cells.forEach(cell => {\n        delete cell.props.errorText;\n        const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n        const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n        // sync for validation\n        if (hasValue && !hasEditableValue) {\n            cell.props.editableValue = cell.props.value;\n        }\n        if (cell.props && hasValue && hasEditableValue) {\n            if (type === 'save') {\n                cell.props.value = cell.props.editableValue;\n                cell.props.isValid = true;\n                delete cell.props.errorText;\n            }\n            delete cell.props.editableValue;\n        }\n    });\n    row.isEditable = !row.isEditable;\n    row.isValid = true;\n    return row;\n};\nconst camelize = (s) => s\n    .toUpperCase()\n    .replace('-', '')\n    .replace('_', '');\nexport const toCamel = (s) => s.replace(/([-_][a-z])/gi, camelize);\n/**\n * @param {string} input - String to capitalize\n */\nexport function capitalize(input) {\n    return input[0].toUpperCase() + input.substring(1);\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}